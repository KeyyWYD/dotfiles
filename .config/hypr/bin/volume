#!/usr/bin/env bash

# OH MY P-C-C-C-C-C

# Icons Folder
icon_dir="$HOME/.config/dunst/assets"

# Vars
_step="5"
_timeout="800"

# Check for stuff
_commands() {
  # https://gist.github.com/palopezv/efd34059af6126ad970940bcc6a90f2e
  if command -v amixer &> /dev/null; then
    _tool="amixer"
    volume_up_cmd="amixer set Master $_step%+"
    volume_down_cmd="amixer set Master $_step%-"
    mute_cmd="amixer set Master toggle"
  elif command -v wpctl &> /dev/null; then
    _tool="wpctl"
    volume_up_cmd="wpctl set-volume @DEFAULT_AUDIO_SINK@ $_step%+ -l 1"
    volume_down_cmd="wpctl set-volume @DEFAULT_AUDIO_SINK@ $_step%-"
    mute_cmd="wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
  elif command -v pactl &> /dev/null; then
    _tool="pactl"
    volume_up_cmd="pactl set-sink-volume @DEFAULT_SINK@ +$_step%"
    volume_down_cmd="pactl set-sink-volume @DEFAULT_SINK@ -$_step%"
    mute_cmd="pactl set-sink-mute @DEFAULT_SINK@ toggle"
  elif command -v pamixer &> /dev/null; then
    _tool="pamixer"
    volume_up_cmd="pamixer -i $_step"
    volume_down_cmd="pamixer -d $_step"
    mute_cmd="pamixer -t"
  else
    echo "No volume control tool found."
    exit 1
  fi
}

# HACKS
_volume() {
  local vol
  case $_tool in
    amixer)
      vol=$(amixer get Master | grep -oP '\d+%' | head -1 | tr -d '%')
      ;;
    wpctl)
      vol=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print ($2 * 100)}')
      ;;
    pactl)
      vol=$(pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | tr -d '%')
      ;;
    pamixer)
      vol=$(pamixer --get-volume-human | tr -d '%')
      ;;
    *)
      exit 1
      ;;
    esac
  echo "$vol"
}

# MORE HACKS
is_muted() {
  case $_tool in
    amixer)
      amixer get  Master | grep -oP '\[off\]' | grep -q 'off' && echo "true" || echo "false"
      ;;
    wpctl)
      wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print ($3 == "[MUTED]" ? "true" : "false")}'
      ;;
    pactl)
      pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}' | grep -q 'yes' && echo "true" || echo "false"
      ;;
    pamixer)
      pamixer --get-mute
      ;;
    *)
      exit 1
      ;;
  esac
}

_notify() {
  local vol=$(_volume)
  local icon

  if [[ "$vol" -eq 0 ]]; then
    icon="$icon_dir/volume-mute.svg"
  elif [[ "$vol" -le 20 ]]; then
    icon="$icon_dir/volume-off.svg"
  elif [[ "$vol" -le 40 ]]; then
    icon="$icon_dir/volume-low.svg"
  elif [[ "$vol" -le 60 ]]; then
    icon="$icon_dir/volume-medium.svg"
  else
    icon="$icon_dir/volume-high.svg"
  fi

  if [ "$(is_muted)" != "true" ]; then
    notify-send -r 91190 -t $_timeout -h int:value:"${vol}" -h string:x-canonical-private-synchronous:volume_notif -u normal -i "${icon}" "Volume: ${vol}%"
  else
    notify-send -r 91190 -t $_timeout -h int:value:"${vol}" -h string:x-canonical-private-synchronous:volume_notif -u normal -i "$icon_dir/volume-mute.svg" "Volume: Muted"
  fi
}

_debug() {
  cat << EOF
=============================================
          Current Controller: $_tool
          Volume Level: $(_volume)%
          Muted: $(is_muted)
=============================================
EOF
}

_help() {
  cat << EOF
Usage: $(basename "$0") [options]

Options:
  --get,                    get volume level
  -i, --inc                 increase volume [+$_step%]
  -d, --dec                 decrease volume [-$_step%]
  -m, --toggle              mute/unmute
  -D, --debug               print debug information
  -h, --help                show help message
EOF
}

_commands

case $1 in
  --get)
    _volume
    ;;
  -i | --inc)
    $volume_up_cmd &> /dev/null
    _notify
    sounds --volume
    ;;
  -d | --dec)
    $volume_down_cmd &> /dev/null
    _notify
    sounds --volume
    ;;
  -m | --toggle)
    $mute_cmd &> /dev/null
    _notify
    ;;
  -D | --debug)
    _debug
    ;;
  -h | --help | *)
    _help
    exit 0
    ;;
esac
